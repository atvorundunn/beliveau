#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jan 22 10:17:22 2020

@author: tvorua
"""

import allel


dat = allel.read_vcf('/Users/tvorua/Downloads/hg38.hybrid.vcf')


chromX = {'POS' : dat['variants/POS'], 'REF' : dat['variants/REF'],
          'ALT' : dat['variants/ALT'], 'GT' : dat['calldata/GT'], 'CHROM' : dat['variants/CHROM']}
#truncate data



dup = {}
seen = {}

for x in range(chromX['POS'].size):
    
    pos = chromX['POS'][x]
    
    if pos in seen.keys():
    
        dup[pos] = [chromX['REF'][x], chromX['CHROM'][x] , seen[pos][0], seen[pos][1]]
        #find duplicates
        
        if chromX['CHROM'][x] == seen[pos][1]:
            print(pos)
            print(chromX['CHROM'][x])
            print(seen[pos][1])
            
            #there are no duplicate positions on the same chromosome!!!
    
    else:
    
        seen[pos] = [chromX['REF'][x], chromX['CHROM'][x]]
        
homo = {} 
#hetero10 = {} 
hetero01 = {}
     
for x in range(chromX['POS'].size):
    
    gt = chromX['GT'][x][0]
    
    if gt[0] == gt[1]:
        
        homo[chromX['POS'][x]] = gt
        #segregate homozygous alleles
        
    #elif gt[0] == 1:
        
     #   hetero10[chromX['POS'][x]] = gt
        #segregate 1 | 0 heterzygous alleles
        
    else:
        hetero01[chromX['POS'][x]] = gt
        #segregate 0 | 1 heterozygous alleles
        

tight = []
loose = []

for x in range(chromX['POS'].size - 1):
    
    dens = chromX['POS'][x + 1] - chromX['POS'][x]
    
    if dens <= 10 and chromX['POS'][x] in hetero01.keys():
        tight.append(chromX['POS'][x])
    if dens >= 100 and chromX['POS'][x] in hetero01.keys():
        loose.append(chromX['POS'][x])
        
        
#TODO: eliminate long references and alternates
